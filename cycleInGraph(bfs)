#include <iostream>
#include<vector>
#include<queue>
using namespace std;

bool check(int t,int n,vector<int>adj[],vector<int>vis)
{
    queue<pair<int,int>>q;
    vis[t]=1;
    q.push({t,-1});
    while(!q.empty())
    {
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto it:adj[node])
        {
            if(!vis[it]){
                vis[it]=1;
                q.push({it,node});
            }
            else if(parent!=it){
                return true;
            }
        }
    }
    return false;
    
}
bool iscycle(int n,vector<int>adj[])
{
    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            if(check(i,n,adj,vis));
            {
                return true;
            }
        }
    }
    return false;
}

int main()
{
  int n,m;
  cin>>n>>m;
  vector<int>adj[n+1];
  for(int i=0;i<m;i++)
  {
      int u,v;
      cin>>u>>v;
      adj[u].push_back(v);
      adj[v].push_back(u);
  }
  if(iscycle(n,adj))
  {
      cout<<"cycle is present"<<endl;
  }
  else{
      cout<<"not present";
  }
    return 0;
}
